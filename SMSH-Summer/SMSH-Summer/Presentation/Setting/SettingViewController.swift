//
//  SettingViewController.swift
//  SMSH-Summer
//
//  Created by Doy Kim on 2022/11/05.
//

import UIKit
import MessageUI
import SafariServices

enum SettingInfo: Int, CaseIterable {
    case VersionInfo = 0
    case EmailFeedback = 1
    case OpensourceLicense = 2
    
    func getString() -> String {
        switch self {
        case .VersionInfo:
            return "Î≤ÑÏ†Ñ Ï†ïÎ≥¥"
        case .EmailFeedback:
            return "Ïï± ÌîºÎìúÎ∞± Î∞è Î¨∏Ïùò"
        case .OpensourceLicense:
            return "Ïò§ÌîàÏÜåÏä§ ÎùºÏù¥ÏÑ†Ïä§"
        }
    }
    
    func getImage() -> String {
        switch self {
        case .VersionInfo:
            return "info.circle.fill"
        case .EmailFeedback:
            return "envelope.open.fill"
        case .OpensourceLicense:
            return "quote.opening"
        }
    }
}

final class SettingViewController: UIViewController {
    
    let mainView = SettingView()
    typealias Item = SettingInfo
    private var dataSource: UICollectionViewDiffableDataSource<Int, Item>!
    // Î≤ÑÏ†ÑÏ†ïÎ≥¥
    public var version: String? {
        guard let dictionary = Bundle.main.infoDictionary,
              let version = dictionary["CFBundleShortVersionString"] as? String else { return nil }
        
        return version
    }
    
    // lifecycle
    override func loadView() {
        view = mainView
    }
    
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        self.view.backgroundColor = .systemBackground
        configure()
        setNavigationBar()
        
    }
    
    func configure() {
        mainView.collectionView.delegate = self
        mainView.collectionView.collectionViewLayout = createLayout()
        configureDataSource()
    }
    
    func setNavigationBar() {
        navigationItem.title = "ÏÑ§Ï†ï"
    }
    
}
// Ïª¥Ìè¨ÏßÄÏÖîÎÑê Î†àÏù¥ÏïÑÏõÉ ÏÑ§Ï†ï
extension SettingViewController {
    /// ÏΩúÎ†âÏÖòÎ∑∞ Ïª¥Ìè¨ÏßÄÏÖîÎÑê Î†àÏù¥ÏïÑÏõÉ ÏÑ§Ï†ï
    private func createLayout() -> UICollectionViewLayout {
        
        var config = UICollectionLayoutListConfiguration(appearance: .insetGrouped)
        config.showsSeparators = true
        
        let layout = UICollectionViewCompositionalLayout.list(using: config)
        
        return layout
    }
    
    /// Diffable datasource
    private func configureDataSource() {
        // ÏÖÄ Îì±Î°ù
        let cellRegistration = UICollectionView.CellRegistration<UICollectionViewListCell, SettingInfo> { [weak self] cell, indexPath, itemIdentifier in
            
            var content = UIListContentConfiguration.valueCell()
            
            content.textProperties.font = .AppleSDGothicNeoMedium(ofSize: 15)
            
            content.text = itemIdentifier.getString()
            if itemIdentifier == .VersionInfo {
                if let version = self?.version {
                    content.secondaryText = version
                }
            }
            content.image = UIImage(systemName: itemIdentifier.getImage())
            content.imageProperties.tintColor = .primaryColor
            
            content.prefersSideBySideTextAndSecondaryText = true
            
            cell.contentConfiguration = content
        }
        
        // Diffable Data Source
        dataSource = UICollectionViewDiffableDataSource(collectionView: mainView.collectionView, cellProvider: { collectionView, indexPath, itemIdentifier in
            
            let cell = collectionView.dequeueConfiguredReusableCell(using: cellRegistration, for: indexPath, item: itemIdentifier)
            
            return cell
        })
        
        var snapshot = NSDiffableDataSourceSnapshot<Int, Item>()
        snapshot.appendSections([0])
        snapshot.appendItems(SettingInfo.allCases)
        
        dataSource.apply(snapshot)
    }
}

extension SettingViewController: UICollectionViewDelegate {
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        
        switch indexPath.item {
        case SettingInfo.VersionInfo.rawValue:
            // Î≤ÑÏ†ÑÏ†ïÎ≥¥ ÎÖ∏ÏÖò Ïó∞Í≤∞
            webButtonTapped(SettingInfo.VersionInfo)
            
        case SettingInfo.EmailFeedback.rawValue:
            // Ïù¥Î©îÏùº Î¨∏Ïùò ÏïàÎÇ¥
            feedbackButtonTapped()
            
        case SettingInfo.OpensourceLicense.rawValue:
            // Ïò§ÌîàÏÜåÏä§ÎùºÏù¥ÏÑºÏä§ ÎÖ∏ÏÖò
            webButtonTapped(SettingInfo.OpensourceLicense)
            
        default:
            break
        }
    }
}
// ÏÖÄ ÏÑ†ÌÉù Ïãú Ï†ÅÏö©ÎêòÎäî Î©îÏÑúÎìú
extension SettingViewController {
    /// Ïõπ Ïó¥Í∏∞
    func webButtonTapped(_ kind: SettingInfo) {
        
        var link: String = ""
        switch kind {
        case .VersionInfo:
            link = "https://www.notion.so/kimdee/0475ca74ec4640bdb4678c6b118a0958"
        case .OpensourceLicense:
            link = "https://kimdee.notion.site/be989f6e15d240f0832f9f060766ca40"
        default:
            return
        }
        
        guard let url = URL(string: link) else { return }
        let svc = SFSafariViewController(url: url)
        present(svc, animated: true, completion: nil)
    }
    
    /// Î©îÏùº Î≥¥ÎÇ¥Í∏∞
    func feedbackButtonTapped() {
        // Ïù¥Î©îÏùºÏ∞ΩÏù¥ ÎÇòÌÉÄÎÇòÎäî Ïª®Ìä∏Î°§Îü¨
        guard MFMailComposeViewController.canSendMail() else {
            // ÏÇ¨Ïö©ÏûêÏùò Î©îÏùº Í≥ÑÏ†ïÏù¥ ÏÑ§Ï†ïÎêòÏñ¥ ÏûàÏßÄ ÏïäÏïÑ Î©îÏùºÏùÑ Î≥¥ÎÇº Ïàò ÏóÜÎã§Îäî Í≤ΩÍ≥† Î©îÏãúÏßÄ Ï∂îÍ∞Ä
            print("Î©îÏùº Î≥¥ÎÇ¥Í∏∞ Ïã§Ìå®")
            let sendMailErrorAlert = UIAlertController(title: "Î©îÏùº Ï†ÑÏÜ° Ïã§Ìå®", message: "Î©îÏùºÏùÑ Î≥¥ÎÇ¥Î†§Î©¥ 'Mail' Ïï±Ïù¥ ÌïÑÏöîÌï©ÎãàÎã§. App StoreÏóêÏÑú Ìï¥Îãπ Ïï±ÏùÑ Î≥µÏõêÌïòÍ±∞ÎÇò Ïù¥Î©îÏùº ÏÑ§Ï†ïÏùÑ ÌôïÏù∏ÌïòÍ≥† Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.", preferredStyle: .alert)
            let goAppStoreAction = UIAlertAction(title: "App StoreÎ°ú Ïù¥ÎèôÌïòÍ∏∞", style: .default) { _ in
                // Ïï±Ïä§ÌÜ†Ïñ¥Î°ú Ïù¥ÎèôÌïòÍ∏∞(Mail)
                if let url = URL(string: "https://apps.apple.com/kr/app/mail/id1108187098"), UIApplication.shared.canOpenURL(url) {
                    if #available(iOS 10.0, *) {
                        UIApplication.shared.open(url, options: [:], completionHandler: nil)
                    } else {
                        UIApplication.shared.openURL(url)
                    }
                }
            }
            let cancleAction = UIAlertAction(title: "Ï∑®ÏÜå", style: .destructive, handler: nil)
            
            sendMailErrorAlert.addAction(goAppStoreAction)
            sendMailErrorAlert.addAction(cancleAction)
            self.present(sendMailErrorAlert, animated: true, completion: nil)
            return
        }
        
        
        let emailTitle = "[Ï¢ãÏùÑÏßÄÎèÑ] ÌîºÎìúÎ∞± Î∞è Î¨∏Ïùò" // Î©îÏùº Ï†úÎ™©
        let messageBody =
                    """
                    üî® OS Version: \(UIDevice.current.systemVersion)
                    üî® Device: \(UIDevice.current.localizedModel)
                    üî® App Version: \(self.getCurrentVersion())
                    ----------------------------------------
                    üî® ÎÇ¥Ïö©:
                    Ï¢ãÏùÑÏßÄÎèÑ Ïï± Î¨∏Ïùò, Î≤ÑÍ∑∏ Ïã†Í≥†, ÌîºÎìúÎ∞± ÎÇ¥Ïö©Ïóê ÎåÄÌï¥ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.
                    Ïä§ÌÅ¨Î¶∞ÏÉ∑ÏùÑ Ìï®Íªò Ï≤®Î∂ÄÌï¥Ï£ºÏãúÎ©¥ ÌÅ∞ ÎèÑÏõÄÏù¥ Îê©ÎãàÎã§. üôá‚Äç‚ôÇÔ∏è
                    
                    
                    """
        // 3
        let toRecipents = ["kimdee.dev@gmail.com"]
        let mc: MFMailComposeViewController = MFMailComposeViewController()
        mc.mailComposeDelegate = self
        mc.setSubject(emailTitle)
        mc.setMessageBody(messageBody, isHTML: false)
        mc.setToRecipients(toRecipents)
        
        self.present(mc, animated: true, completion: nil)
    }
    
    // 4
    @objc(mailComposeController:didFinishWithResult:error:)
    func mailComposeController(_ controller: MFMailComposeViewController, didFinishWith result: MFMailComposeResult,error: Error?) {
        controller.dismiss(animated: true)
    }
    
    /// Ïï±Ïùò Î≤ÑÏ†ÑÏ†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Í∏∞
    func getCurrentVersion() -> String {
        guard let dictionary = Bundle.main.infoDictionary,
              let version = dictionary["CFBundleShortVersionString"] as? String else { return "" }
        return version
    }
}
extension SettingViewController: MFMailComposeViewControllerDelegate {
}

